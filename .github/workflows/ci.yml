name: Run AWS Spec Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_call:
    inputs:
      test_type:
        description: 'Type of test: terraform or cloudformation'
        required: false
        default: 'terraform'
        type: 'string'
      code_sha:
        description: 'SHA of the terraform or cloudformation code to checkout'
        required: false
        type: 'string'

env:
  USER: gha-${{ github.run_id }}

jobs:
  permission_check:
    runs-on: ubuntu-latest
    outputs:
      can-write: ${{ steps.check.outputs.can-write }}
    env:
      OBSERVE_CUSTOMER: ${{ secrets.OBSERVE_CUSTOMER }}

    steps:
    - id: check
      run: |
        # If the OBSERVE_CUSTOMER secret is MIA we can't run tests
        if [[ -z "$OBSERVE_CUSTOMER" ]]; then
          echo "can-write=false" >> $GITHUB_OUTPUT
        else
          echo "can-write=true" >> $GITHUB_OUTPUT
        fi

  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set_output_image_name.outputs.image_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/aws-test-kitchen-public
        submodules: true
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Metadata for Docker Image
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public
        tags: |
          type=sha,priority=1001
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set IMAGE_NAME environment variable
      id: set_output_image_name
      run: |
        IMAGE_NAME=$(echo "${DOCKER_METADATA_OUTPUT_TAGS}" | head -n 1)
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
        
    - name: Build docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: false
        push: false
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:latest
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:main
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:${{ github.ref_name }}
        cache-to: type=gha,mode=max

  determine-provider:
    runs-on: ubuntu-latest
    outputs:
      providers: ${{steps.set-providers.outputs.providers}}

    steps:
    - id: set-providers
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" ]]; then
          echo "::set-output name=providers::[\"cloudformation\", \"terraform\"]"
        else
          echo "::set-output name=providers::[\"${{ github.event.inputs.test_type }}\"]"
        fi

  test:
    runs-on: ubuntu-latest
    needs: [permission_check, build, determine-provider]
    if: needs.permission_check.outputs.can-write == 'true'
    name: test ${{ matrix.provider }}

    env:
      OBSERVE_CUSTOMER: ${{ secrets.OBSERVE_CUSTOMER }}
      OBSERVE_TOKEN: ${{ secrets.OBSERVE_TOKEN }}
      OBSERVE_DOMAIN: ${{ secrets.OBSERVE_DOMAIN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      IMAGE_NAME: ${{ needs.build.outputs.image_name }}

    strategy:
      matrix:
        provider: ${{fromJson(needs.determine-provider.outputs.providers)}}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/aws-test-kitchen-public
        submodules: true

    - name: Checkout Terraform SHA
      if: matrix.provider == 'terraform' && github.event.inputs.terraform_sha != ''
      run: |
        cd terraform-aws-collection
        git checkout ${{ github.event.inputs.terraform_sha }}
      
    - name: Checkout CloudFormation SHA
      if: matrix.provider == 'cloudformation' && github.event.inputs.cloudformation_sha != ''
      run: |
        cd cloudformation-aws-collection
        git checkout ${{ github.event.inputs.cloudformation_sha }}  
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Metadata for Docker Image
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public
        tags: |
          type=sha,priority=1001
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        push: false
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:latest
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:main
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:${{ github.ref_name }}
        cache-to: type=gha,mode=max

    - name: Setup Infra and Run spec tests
      run: make docker/test
      env:
        PROVIDER: ${{ matrix.provider }}

    - name: Teardown test infrastructure
      if: always()
      continue-on-error: true
      run: make docker/clean
      env:
        PROVIDER: ${{ matrix.provider }}
  
  push:
    runs-on: ubuntu-latest
    needs: [permission_check, build, test]
    if: needs.permission_check.outputs.can-write == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository_owner }}/aws-test-kitchen-public
        submodules: true
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Metadata for Docker Image
      id: docker_metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public
        tags: |
          type=sha,priority=1001
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Push Docker images
      if: success()
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: ${{ steps.docker_metadata.outputs.labels }}
        cache-from: |
          type=gha
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:latest
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:main
          ghcr.io/${{ github.repository_owner }}/aws-test-kitchen-public:${{ github.ref_name }}
        cache-to: type=gha,mode=max
